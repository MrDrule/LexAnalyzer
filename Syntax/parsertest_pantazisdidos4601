void	T_VOID, L:1
main	T_IDENTIFIER, L:1
(	T_LPAREN, L:1
)	T_RPAREN, L:1
;	T_SEMICOLON, L:1
int	T_INT, L:2
cal	T_IDENTIFIER, L:2
(	T_LPAREN, L:2
)	T_RPAREN, L:2
;	T_SEMICOLON, L:2
char	T_CHAR, L:3
proc	T_IDENTIFIER, L:3
(	T_LPAREN, L:3
)	T_RPAREN, L:3
;	T_SEMICOLON, L:3
double	T_DOUBLE, L:4
perc	T_IDENTIFIER, L:4
(	T_LPAREN, L:4
)	T_RPAREN, L:4
;	T_SEMICOLON, L:4
a	T_IDENTIFIER, L:5
=	T_ASSIGN, L:5
3	T_DIGIT, L:5
;	T_SEMICOLON, L:5
b	T_IDENTIFIER, L:6
=	T_ASSIGN, L:6
5	T_DIGIT, L:6
;	T_SEMICOLON, L:6
a	T_IDENTIFIER, L:7
=	T_ASSIGN, L:7
a	T_IDENTIFIER, L:7
+	T_PLUS, L:7
b	T_IDENTIFIER, L:7
;	T_SEMICOLON, L:7
if	T_IF, L:8
(	T_LPAREN, L:8
a	T_IDENTIFIER, L:8
<	T_LESS, L:8
3	T_DIGIT, L:8
)	T_RPAREN, L:8
{	T_LBRACE, L:8
for	T_FOR, L:9
(	T_LPAREN, L:9
i	T_IDENTIFIER, L:9
=	T_ASSIGN, L:9
0	T_DIGIT, L:9
;	T_SEMICOLON, L:9
i	T_IDENTIFIER, L:9
<	T_LESS, L:9
2	T_DIGIT, L:9
0	T_DIGIT, L:9
;	T_SEMICOLON, L:9
++	T_INCREMENT, L:9
i	T_IDENTIFIER, L:9
)	T_RPAREN, L:9
{	T_LBRACE, L:10
scanf	T_SCANF, L:11
(	T_LPAREN, L:11
"	T_QMARK, L:11
Kalispera	T_IDENTIFIER, L:11
"	T_QMARK, L:11
)	T_RPAREN, L:11
;	T_SEMICOLON, L:11
}	T_RBRACE, L:12
}	T_RBRACE, L:13
else	T_ELSE, L:14
{	T_LBRACE, L:14
while	T_WHILE, L:15
(	T_LPAREN, L:15
i	T_IDENTIFIER, L:15
<	T_LESS, L:15
1	T_DIGIT, L:15
5	T_DIGIT, L:15
)	T_RPAREN, L:15
{	T_LBRACE, L:16
fopen	T_FOPEN, L:17
(	T_LPAREN, L:17
"	T_QMARK, L:17
test	T_IDENTIFIER, L:17
"	T_QMARK, L:17
)	T_RPAREN, L:17
;	T_SEMICOLON, L:17
}	T_RBRACE, L:18
}	T_RBRACE, L:20
